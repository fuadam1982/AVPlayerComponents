#. 【状态控制】遵循props下行，event上行这个约束后必然带来的问题是：同级数据访问（属性与事件）和间隔组件传递数据
#. 【UI布局】遵循props下行设置组件内UI属性，组件内layout布局上行回调
#. 必须把constVars与props分开，至少OC里面混在一起是不方便的。另外，组件就是View，现在分开写也是很麻烦的，而且无法明确体现组件之间的关系。应该利用语法解决这个问题。

棘手问题：
1. 播放时间与slider冲突
2. tap与double 不需要控制了
3. slider两边滑动不需要自动补全
4. 视频buffer自动播完后的状态，error or rate = 0
5. seekToTime后，isPause需要传递出去
6. 没有网时，seekToTime，只触发viewModel，不触发player

a. Redux不仅仅局限于组件间的状态传递，更重要的是更高层上的模块间的数据传递。例如：用户token过期，试用vip过期，vip到期续费，新消息等。都属于可能有其它模块逻辑进行处理。有两种解决方案，1. 由当前root组件处理相关的业务逻辑（这种写法会拥有很多无关的逻辑处理）2. 编写一个middleware，专门处理相关类型的状态判断。然后由不同的模块实现具体的中间件逻辑。
b. 是否需要一个最高层的AppComponent逻辑，用于控制路由，提供通用信息等？
c. 因为不知道什么时候注册reducer，所以要手动的在全局入口调用注册。然后才能实现initStore的各自执行。可以把每个store看做归属于module，比如视频组件会在很多模块中使用。因此要有videoId进行状态区分。
d. 可以引入Module概念了，其目的就是接受系统事件，管理statestore。并且不需要root组件，组件是由其提供的且可以有多实例共存。在+load方法中注册reducer，所以可以自动执行

0. 进度条拖动70%即为老用户
[ok] 1. isnan, 从avplayer拿到的数据都要检测
[ok] 2. 计算网速,netSpeedUpdate, 以后使用本地代理会计算的更准确些
3. 没有网处理, 父组件提示
[ok] 4. 4g是否预下载, 父组件提示用户。如果不看则停止后返回。4G时先暂停然后提示
[ok] 5. 切换高低清
6. 埋点
[suspend] 7. emptybuffer，playlikey是否需要用
7. 错误处理, 遵循以前的提示逻辑, 本地视频如果出错则删除重新在线播放。错误码-103等
[ok] 8. 无网时buffer播放完不需要loading提示，暂停后再开始是否需要提示？
9. 目前卡顿时会自动暂停，注意8的逻辑，暂停后恢复如何触发lagging提示，如果可以播放自动0.5好秒后就可以提示
10. 播放完成后回到开始，是否需要这个逻辑？
11. 拖动进度条后隐藏的逻辑？
12. 加载进度条需求确认，是精确的，还是覆盖的. 目前用覆盖的，只有实现了边下边播才有意义
13. 手势左右滑动，快速是快进快退。按住是拖动进度条
14. 视频横竖屏切换要保持平滑，就要共享avplayer，享元模式
15. player -> footer -> progress, playbtn, timer。这种中间隔离情况如何传递props, callbacks. view addSubView,但实际组件关系式平级的就可以解决。另外，footer是要监听浮动层的消息。虽然可以使用redux实现。但是怎么才能不侵入？
16. 旋转屏幕avplayer需要支持，其它由父控件处理
17. avplayer有业务无关的埋点子插件，其它由父控件处理业务相关埋点插件
18.component可以注入store用来dispatch，但缺乏协议限制（YCStates -> Enum）。或者在具体使用的component中使用redux
19. 待产品确认，各种手势之间应该为互斥，隐藏时间时机，错误提示等.进度条滑动停止时才seek？
20. 点击status暂停后，手势浮动层上的play是否出现？
21. AVMutableVideoComposition可以用来加水印，导出方向

1. 本地视频，解密在avplayercomponent之前。如果没有网络是否提示，展示header,tailer视频
2. asset.playable 可用之前需要显示loading，已确认。目前的做法playable后才创建playerItem，然后根据playerItem的status判断是否可以播放。并且清除以前的playerItem的KVO
3. 屏幕旋转，statusbar隐藏。提示，分享等也应该是横屏。组件吗?
4. 非wifi，停止PlayItem的数据加载。清除playitem，cancelLoading cancelPendingSeeks [player replaceCurrentItemWithPlayerItem:nil]。如果设置了3G可播放AwesomePlayerReachWWANAllowed。如果3G不允许播放，那么可以回调lagged,且下载速率为0
[suspend] 5. playbackLikelyToKeepUp含义？有buffer可以播放，预加载使用loadValuesAsynchronouslyForKeys。暂停后又可以播放了
6. progress显示加载条和播放条
7. rate=0控制暂停, 如果没有buffer了而停止也是0, rate=1 play，rate=-1播放失败，player属性
8. custom delegate能否做到缓存控制检测，解码等
9. 使用CADisplayLink做事件监听，更精确
10. seek后出现NaNError
[ok] 11. loadedTimeRanges用于处理已经加载了多少
[suspend] 12. PlaybackBufferEmpty_KEYPATH缓冲区为空，认为是卡顿需要显示loading，rate=0后也可能会触发需要测试。还要配合自定义的卡顿逻辑。[ok] AVPlayerItemPlaybackStalledNotification也用来接受卡顿通知。自定义卡顿检测shouldJudgeLagged
[ok] 13. AVPlayerItemDidPlayToEndTimeNotification 视频播放结束
[ok] 14. addPeriodicTimeObserverForInterval用于监听播放进度，可以设置很高的精度，addBoundaryTimeObserverForTimes用于监听交互题播放点. 计算交互点时有0.35s的误差值。外部需要记录交互题选择时间
15. 视频结束前3s开始获取完成页, 由父控件处理3s逻辑
[no] 16.利用resourceLoaderDelegate下载ts片段，然后根据m3u8中的ts list获知加载进度，卡顿判断，3G网络是否下载，下载速度计算。无法实现
17. 测试customDelegate下载完一个ts时，LoadedTimeRanges是否是中间就会返回还是与ts一起返回
[ok] 18. 需要确定play和seek的先后顺序。seek到上次观看位置
19. progress监听播放进度，而手动拖动的后可能进度条会跳回去
20. 停留时间是根据播放完成，还是viewmodel销毁来结束
21. seek后，可能会差很多时间例如315，但是从307开始播放
22. 如果有cache几只，反复seek就不会出现loading过得内容还被重复loading
23. 暂停时显示loading网速直到加载全部后，显示什么
24. UIApplicationWillResignActiveNotification 使用系统事件
25. 限速测试
26. 通过AVAssetImageGenerator获取最后一frame图片，切换时可以效果更好

==============================================
/** 全屏播放按钮 */
@property (nonatomic, strong) UIButton *fullScreenButton;
    // 全屏按钮
    self.fullScreenButton = [UIButton buttonWithType:UIButtonTypeCustom];
    self.fullScreenButton.backgroundColor = [UIColor blueColor];
    [self.statusBarComponent.view addSubview:self.fullScreenButton];
        // 状态栏上的全屏按钮
    [self.fullScreenButton mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.equalTo(self.statusBarComponent.view).offset(-16);
        make.width.and.height.equalTo(@22);
        make.centerY.equalTo(self.statusBarComponent.view);
    }];

==============================
/**
 视频播放器将要进行屏幕旋转

 @param player player
 @param isPortrait 当前是否为竖屏
 */
- (void)player:(UIView *)player onWillScreenRotation:(BOOL)isPortrait;


/**
 视频播放器完成进行屏幕旋转

 @param player player
 @param isPortrait 单签是否为竖屏
 */
- (void)player:(UIView *)player onDidScreenRotation:(BOOL)isPortrait;
==============================
    // TODO: how to use
    // 无buffer
    [[RACObserve(self.playerItem, playbackBufferEmpty)
      takeUntilBlock:^BOOL(id x) {
          @strongify(self);
          return self.playerItem == nil;
      }]
     subscribeNext:^(id x) {
         @strongify(self);
         NSLog(@"");
     }];
    // 可以恢复播放
    [[RACObserve(self.playerItem, playbackLikelyToKeepUp)
      takeUntilBlock:^BOOL(id x) {
          @strongify(self);
          return self.playerItem == nil;
      }]
     subscribeNext:^(id x) {
         @strongify(self);
         NSLog(@"");
     }];